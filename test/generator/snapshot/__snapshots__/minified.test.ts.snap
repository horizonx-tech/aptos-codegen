// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot minified 1`] = `
[
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString } from 'aptos'

export type Aggregator = {
  handle: MaybeHexString
  key: MaybeHexString
  limit: BCS.Uint128
}
",
      "path": "./Aggregator.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { AptosModuleClient, MoveModuleJSON, MoveModuleJSONMinified, SignerOrClient } from '@horizonx/aptos-module-client'
import { CoinModule } from './Coin'
  
const _abi: MoveModuleJSON | MoveModuleJSONMinified = {
  "name": "coin",
  "address": "0x1",
  "exposed_functions": [
    {
      "name": "freeze_coin_store",
      "is_entry": true,
      "generic_type_params": [
        {}
      ],
      "params": [
        "address",
        "&0x1::coin::FreezeCapability<T0>"
      ]
    },
    {
      "name": "transfer",
      "is_entry": true,
      "generic_type_params": [
        {}
      ],
      "params": [
        "address",
        "u64"
      ]
    },
    {
      "name": "upgrade_supply",
      "is_entry": true,
      "generic_type_params": [
        {}
      ],
      "params": []
    }
  ],
  "structs": [
    {
      "name": "CoinInfo",
      "abilities": [
        "key"
      ],
      "fields": [
        {
          "name": "name"
        },
        {
          "name": "symbol"
        },
        {
          "name": "decimals"
        },
        {
          "name": "supply"
        }
      ]
    },
    {
      "name": "CoinStore",
      "abilities": [
        "key"
      ],
      "fields": [
        {
          "name": "coin"
        },
        {
          "name": "frozen"
        },
        {
          "name": "deposit_events",
          "type": "0x1::event::EventHandle<0x1::coin::DepositEvent>"
        },
        {
          "name": "withdraw_events",
          "type": "0x1::event::EventHandle<0x1::coin::WithdrawEvent>"
        }
      ]
    },
    {
      "name": "SupplyConfig",
      "abilities": [
        "key"
      ],
      "fields": [
        {
          "name": "allow_upgrades"
        }
      ]
    }
  ]
}
  
export class CoinModuleFactory {
  static readonly abi = _abi
  static connect = (signerOrClient: SignerOrClient, address?: string) => {
    return new AptosModuleClient(_abi, signerOrClient, address) as CoinModule
  }
}
",
      "path": "./CoinModuleFactory.ts",
    },
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString, Types } from 'aptos'
import { Option } from './Option'
import { OptionalAggregator } from './OptionalAggregator'
import { EventHandle } from './Event'
import { AptosModuleClient, EventGetterParams, TypedMoveResource, TypedVersionedEvent } from '@horizonx/aptos-module-client'

export interface CoinModule extends AptosModuleClient  {
  freeze_coin_store: (payload: { type_arguments: [string], arguments: [MaybeHexString, any] }, options?: Partial<Types.SubmitTransactionRequest>) => Promise<Types.HashValue>
  transfer: (payload: { type_arguments: [string], arguments: [MaybeHexString, BCS.Uint64] }, options?: Partial<Types.SubmitTransactionRequest>) => Promise<Types.HashValue>
  upgrade_supply: (payload: { type_arguments: [string] }, options?: Partial<Types.SubmitTransactionRequest>) => Promise<Types.HashValue>
  getCoinInfo: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<CoinInfo>>
  getCoinStore: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<CoinStore>>
  getSupplyConfig: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<SupplyConfig>>
  getDepositEvents: (address: MaybeHexString, params?: EventGetterParams) => Promise<TypedVersionedEvent<DepositEvent>[]>
  getWithdrawEvents: (address: MaybeHexString, params?: EventGetterParams) => Promise<TypedVersionedEvent<WithdrawEvent>[]>
}

export type BurnCapability = {
  dummy_field: boolean
}

export type Coin = {
  value: BCS.Uint64
}

export type CoinInfo = {
  name: string
  symbol: string
  decimals: BCS.Uint8
  supply: Option<OptionalAggregator>
}

export type CoinStore = {
  coin: Coin
  frozen: boolean
  deposit_events: EventHandle
  withdraw_events: EventHandle
}

export type DepositEvent = {
  amount: BCS.Uint64
}

export type FreezeCapability = {
  dummy_field: boolean
}

export type MintCapability = {
  dummy_field: boolean
}

export type SupplyConfig = {
  allow_upgrades: boolean
}

export type WithdrawEvent = {
  amount: BCS.Uint64
}
",
      "path": "./Coin.ts",
    },
    "utilities": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { TypedMoveResource } from '@horizonx/aptos-module-client'
import { Types } from 'aptos'
import { CoinInfo, CoinStore, SupplyConfig } from './Coin'

export class CoinUtils {
  private address: string

  constructor(address?: string){
    this.address = address || '0x1'
  }

  isCoinInfo = (resource: Types.MoveResource): resource is TypedMoveResource<CoinInfo> => {
    const regexp = new RegExp(\`\${this.address}::coin::CoinInfo(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isCoinStore = (resource: Types.MoveResource): resource is TypedMoveResource<CoinStore> => {
    const regexp = new RegExp(\`\${this.address}::coin::CoinStore(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isSupplyConfig = (resource: Types.MoveResource): resource is TypedMoveResource<SupplyConfig> => {
    const regexp = new RegExp(\`\${this.address}::coin::SupplyConfig(?:<|$)\`)
    return regexp.test(resource.type)
  }
}
",
      "path": "./CoinUtils.ts",
    },
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS } from 'aptos'
import { GUID } from './Guid'

export type EventHandle = {
  counter: BCS.Uint64
  guid: GUID
}
",
      "path": "./Event.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString } from 'aptos'

export type GUID = {
  id: ID
}

export type ID = {
  creation_num: BCS.Uint64
  addr: MaybeHexString
}
",
      "path": "./Guid.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
export type Option<T0> = {
  vec: Array<T0>
}
",
      "path": "./Option.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS } from 'aptos'
import { Option } from './Option'
import { Aggregator } from './Aggregator'

export type Integer = {
  value: BCS.Uint128
  limit: BCS.Uint128
}

export type OptionalAggregator = {
  aggregator: Option<Aggregator>
  integer: Option<Integer>
}
",
      "path": "./OptionalAggregator.ts",
    },
    "utilities": undefined,
  },
]
`;
