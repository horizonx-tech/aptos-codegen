// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generator snapshot 1`] = `
[
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString, Types } from 'aptos'
import { EventHandle } from './Event'
import { Option } from './Option'
import { TypeInfo } from './TypeInfo'
import { Table } from './Table'
import { AptosModuleClient, EventGetterParams, TypedEvent, TypedMoveResource } from '@horizonx/aptos-module-client'

export interface AccountModule extends AptosModuleClient  {
  offer_signer_capability: (payload: { arguments: [Array<BCS.Uint8>, BCS.Uint8, Array<BCS.Uint8>, MaybeHexString] }) => Promise<void>
  revoke_signer_capability: (payload: { arguments: [MaybeHexString] }) => Promise<void>
  rotate_authentication_key: (payload: { arguments: [BCS.Uint8, Array<BCS.Uint8>, BCS.Uint8, Array<BCS.Uint8>, Array<BCS.Uint8>, Array<BCS.Uint8>] }) => Promise<void>
  getAccount: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<Account>>
  getOriginatingAddress: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<OriginatingAddress>>
  getCoinRegisterEvents: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<CoinRegisterEvent>>
  getKeyRotationEvents: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<KeyRotationEvent>>
}

export type Account = {
  authentication_key: Array<BCS.Uint8>
  sequence_number: BCS.Uint64
  guid_creation_num: BCS.Uint64
  coin_register_events: EventHandle
  key_rotation_events: EventHandle
  rotation_capability_offer: CapabilityOffer
  signer_capability_offer: CapabilityOffer
}

export type CapabilityOffer = {
  for: Option<MaybeHexString>
}

export type CoinRegisterEvent = {
  type_info: TypeInfo
}

export type KeyRotationEvent = {
  old_authentication_key: Array<BCS.Uint8>
  new_authentication_key: Array<BCS.Uint8>
}

export type OriginatingAddress = {
  address_map: Table
}

export type RotationCapability = {
  account: MaybeHexString
}

export type RotationCapabilityOfferProofChallenge = {
  sequence_number: BCS.Uint64
  recipient_address: MaybeHexString
}

export type RotationProofChallenge = {
  sequence_number: BCS.Uint64
  originator: MaybeHexString
  current_auth_key: MaybeHexString
  new_public_key: Array<BCS.Uint8>
}

export type SignerCapability = {
  account: MaybeHexString
}

export type SignerCapabilityOfferProofChallenge = {
  sequence_number: BCS.Uint64
  recipient_address: MaybeHexString
}
",
      "path": "./Account.ts",
    },
    "utilities": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { TypedMoveResource } from '@horizonx/aptos-module-client'
import { Types } from 'aptos'
import { Account, OriginatingAddress } from './Account'

export class AccountUtils {
  private address: string

  constructor(address?: string){
    this.address = address || '0x1'
  }

  isAccount = (resource: Types.MoveResource): resource is TypedMoveResource<Account> => {
    const regexp = new RegExp(\`\${this.address}::account::Account(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isOriginatingAddress = (resource: Types.MoveResource): resource is TypedMoveResource<OriginatingAddress> => {
    const regexp = new RegExp(\`\${this.address}::account::OriginatingAddress(?:<|$)\`)
    return regexp.test(resource.type)
  }

  extractAccountTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::account::Account<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractOriginatingAddressTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::account::OriginatingAddress<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

}
",
      "path": "./AccountUtils.ts",
    },
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString } from 'aptos'

export type Aggregator = {
  handle: MaybeHexString
  key: MaybeHexString
  limit: BCS.Uint128
}
",
      "path": "./Aggregator.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString, Types } from 'aptos'
import { MintCapability } from './Coin'
import { AptosModuleClient, TypedMoveResource } from '@horizonx/aptos-module-client'

export interface AptosCoinModule extends AptosModuleClient  {
  claim_mint_capability: () => Promise<void>
  delegate_mint_capability: (payload: { arguments: [any, MaybeHexString] }) => Promise<void>
  mint: (payload: { arguments: [MaybeHexString, BCS.Uint64] }) => Promise<void>
  getAptosCoin: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<AptosCoin>>
  getDelegations: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<Delegations>>
  getMintCapStore: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<MintCapStore>>
}

export type AptosCoin = {
  dummy_field: boolean
}

export type DelegatedMintCapability = {
  to: MaybeHexString
}

export type Delegations = {
  inner: Array<DelegatedMintCapability>
}

export type MintCapStore = {
  mint_cap: MintCapability
}
",
      "path": "./AptosCoin.ts",
    },
    "utilities": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { TypedMoveResource } from '@horizonx/aptos-module-client'
import { Types } from 'aptos'
import { AptosCoin, Delegations, MintCapStore } from './AptosCoin'

export class AptosCoinUtils {
  private address: string

  constructor(address?: string){
    this.address = address || '0x1'
  }

  isAptosCoin = (resource: Types.MoveResource): resource is TypedMoveResource<AptosCoin> => {
    const regexp = new RegExp(\`\${this.address}::aptos_coin::AptosCoin(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isDelegations = (resource: Types.MoveResource): resource is TypedMoveResource<Delegations> => {
    const regexp = new RegExp(\`\${this.address}::aptos_coin::Delegations(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isMintCapStore = (resource: Types.MoveResource): resource is TypedMoveResource<MintCapStore> => {
    const regexp = new RegExp(\`\${this.address}::aptos_coin::MintCapStore(?:<|$)\`)
    return regexp.test(resource.type)
  }

  extractAptosCoinTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::aptos_coin::AptosCoin<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractDelegationsTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::aptos_coin::Delegations<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractMintCapStoreTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::aptos_coin::MintCapStore<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

}
",
      "path": "./AptosCoinUtils.ts",
    },
  },
  {
    "factory": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { AptosModuleClient, MoveModuleJSON, SignerOrClient } from '@horizonx/aptos-module-client'
import { AptosGovernanceModule } from './AptosGovernance'
  
const _abi: MoveModuleJSON = {
  "address": "0x1",
  "name": "aptos_governance",
  "friends": [],
  "exposed_functions": [
    {
      "name": "add_approved_script_hash",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [],
      "params": [
        "u64"
      ],
      "return": []
    },
    {
      "name": "create_proposal",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [],
      "params": [
        "&signer",
        "address",
        "vector<u8>",
        "vector<u8>",
        "vector<u8>"
      ],
      "return": []
    },
    {
      "name": "get_min_voting_threshold",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [],
      "params": [],
      "return": [
        "u128"
      ]
    },
    {
      "name": "get_required_proposer_stake",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [],
      "params": [],
      "return": [
        "u64"
      ]
    },
    {
      "name": "get_voting_duration_secs",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [],
      "params": [],
      "return": [
        "u64"
      ]
    },
    {
      "name": "reconfigure",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [],
      "params": [
        "&signer"
      ],
      "return": []
    },
    {
      "name": "remove_approved_hash",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [],
      "params": [
        "u64"
      ],
      "return": []
    },
    {
      "name": "resolve",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [],
      "params": [
        "u64",
        "address"
      ],
      "return": [
        "signer"
      ]
    },
    {
      "name": "store_signer_cap",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [],
      "params": [
        "&signer",
        "address",
        "0x1::account::SignerCapability"
      ],
      "return": []
    },
    {
      "name": "update_governance_config",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [],
      "params": [
        "&signer",
        "u128",
        "u64",
        "u64"
      ],
      "return": []
    },
    {
      "name": "vote",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [],
      "params": [
        "&signer",
        "address",
        "u64",
        "bool"
      ],
      "return": []
    }
  ],
  "structs": [
    {
      "name": "ApprovedExecutionHashes",
      "is_native": false,
      "abilities": [
        "key"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "hashes",
          "type": "0x1::simple_map::SimpleMap<u64, vector<u8>>"
        }
      ]
    },
    {
      "name": "CreateProposalEvent",
      "is_native": false,
      "abilities": [
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "proposer",
          "type": "address"
        },
        {
          "name": "stake_pool",
          "type": "address"
        },
        {
          "name": "proposal_id",
          "type": "u64"
        },
        {
          "name": "execution_hash",
          "type": "vector<u8>"
        },
        {
          "name": "proposal_metadata",
          "type": "0x1::simple_map::SimpleMap<0x1::string::String, vector<u8>>"
        }
      ]
    },
    {
      "name": "GovernanceConfig",
      "is_native": false,
      "abilities": [
        "key"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "min_voting_threshold",
          "type": "u128"
        },
        {
          "name": "required_proposer_stake",
          "type": "u64"
        },
        {
          "name": "voting_duration_secs",
          "type": "u64"
        }
      ]
    },
    {
      "name": "GovernanceEvents",
      "is_native": false,
      "abilities": [
        "key"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "create_proposal_events",
          "type": "0x1::event::EventHandle<0x1::aptos_governance::CreateProposalEvent>"
        },
        {
          "name": "update_config_events",
          "type": "0x1::event::EventHandle<0x1::aptos_governance::UpdateConfigEvent>"
        },
        {
          "name": "vote_events",
          "type": "0x1::event::EventHandle<0x1::aptos_governance::VoteEvent>"
        }
      ]
    },
    {
      "name": "GovernanceResponsbility",
      "is_native": false,
      "abilities": [
        "key"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "signer_caps",
          "type": "0x1::simple_map::SimpleMap<address, 0x1::account::SignerCapability>"
        }
      ]
    },
    {
      "name": "RecordKey",
      "is_native": false,
      "abilities": [
        "copy",
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "stake_pool",
          "type": "address"
        },
        {
          "name": "proposal_id",
          "type": "u64"
        }
      ]
    },
    {
      "name": "UpdateConfigEvent",
      "is_native": false,
      "abilities": [
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "min_voting_threshold",
          "type": "u128"
        },
        {
          "name": "required_proposer_stake",
          "type": "u64"
        },
        {
          "name": "voting_duration_secs",
          "type": "u64"
        }
      ]
    },
    {
      "name": "VoteEvent",
      "is_native": false,
      "abilities": [
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "proposal_id",
          "type": "u64"
        },
        {
          "name": "voter",
          "type": "address"
        },
        {
          "name": "stake_pool",
          "type": "address"
        },
        {
          "name": "num_votes",
          "type": "u64"
        },
        {
          "name": "should_pass",
          "type": "bool"
        }
      ]
    },
    {
      "name": "VotingRecords",
      "is_native": false,
      "abilities": [
        "key"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "votes",
          "type": "0x1::table::Table<0x1::aptos_governance::RecordKey, bool>"
        }
      ]
    }
  ]
}
  
export class AptosGovernanceModuleFactory {
  static readonly abi = _abi
  static connect = (signerOrClient: SignerOrClient, address?: string) => {
    return new AptosModuleClient(_abi, signerOrClient, address) as AptosGovernanceModule
  }
}
",
      "path": "./AptosGovernanceModuleFactory.ts",
    },
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString, Types } from 'aptos'
import { SimpleMap } from './SimpleMap'
import { EventHandle } from './Event'
import { SignerCapability } from './Account'
import { Table } from './Table'
import { AptosModuleClient, EventGetterParams, TypedEvent, TypedMoveResource } from '@horizonx/aptos-module-client'

export interface AptosGovernanceModule extends AptosModuleClient  {
  create_proposal: (payload: { arguments: [MaybeHexString, Array<BCS.Uint8>, Array<BCS.Uint8>, Array<BCS.Uint8>] }) => Promise<void>
  vote: (payload: { arguments: [MaybeHexString, BCS.Uint64, boolean] }) => Promise<void>
  getApprovedExecutionHashes: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<ApprovedExecutionHashes>>
  getGovernanceConfig: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<GovernanceConfig>>
  getGovernanceEvents: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<GovernanceEvents>>
  getGovernanceResponsbility: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<GovernanceResponsbility>>
  getVotingRecords: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<VotingRecords>>
  getCreateProposalEvents: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<CreateProposalEvent>>
  getUpdateConfigEvents: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<UpdateConfigEvent>>
  getVoteEvents: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<VoteEvent>>
}

export type ApprovedExecutionHashes = {
  hashes: SimpleMap<BCS.Uint64, Array<BCS.Uint8>>
}

export type CreateProposalEvent = {
  proposer: MaybeHexString
  stake_pool: MaybeHexString
  proposal_id: BCS.Uint64
  execution_hash: Array<BCS.Uint8>
  proposal_metadata: SimpleMap<string, Array<BCS.Uint8>>
}

export type GovernanceConfig = {
  min_voting_threshold: BCS.Uint128
  required_proposer_stake: BCS.Uint64
  voting_duration_secs: BCS.Uint64
}

export type GovernanceEvents = {
  create_proposal_events: EventHandle
  update_config_events: EventHandle
  vote_events: EventHandle
}

export type GovernanceResponsbility = {
  signer_caps: SimpleMap<MaybeHexString, SignerCapability>
}

export type RecordKey = {
  stake_pool: MaybeHexString
  proposal_id: BCS.Uint64
}

export type UpdateConfigEvent = {
  min_voting_threshold: BCS.Uint128
  required_proposer_stake: BCS.Uint64
  voting_duration_secs: BCS.Uint64
}

export type VoteEvent = {
  proposal_id: BCS.Uint64
  voter: MaybeHexString
  stake_pool: MaybeHexString
  num_votes: BCS.Uint64
  should_pass: boolean
}

export type VotingRecords = {
  votes: Table
}
",
      "path": "./AptosGovernance.ts",
    },
    "utilities": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { TypedMoveResource } from '@horizonx/aptos-module-client'
import { Types } from 'aptos'
import { ApprovedExecutionHashes, GovernanceConfig, GovernanceEvents, GovernanceResponsbility, VotingRecords } from './AptosGovernance'

export class AptosGovernanceUtils {
  private address: string

  constructor(address?: string){
    this.address = address || '0x1'
  }

  isApprovedExecutionHashes = (resource: Types.MoveResource): resource is TypedMoveResource<ApprovedExecutionHashes> => {
    const regexp = new RegExp(\`\${this.address}::aptos_governance::ApprovedExecutionHashes(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isGovernanceConfig = (resource: Types.MoveResource): resource is TypedMoveResource<GovernanceConfig> => {
    const regexp = new RegExp(\`\${this.address}::aptos_governance::GovernanceConfig(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isGovernanceEvents = (resource: Types.MoveResource): resource is TypedMoveResource<GovernanceEvents> => {
    const regexp = new RegExp(\`\${this.address}::aptos_governance::GovernanceEvents(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isGovernanceResponsbility = (resource: Types.MoveResource): resource is TypedMoveResource<GovernanceResponsbility> => {
    const regexp = new RegExp(\`\${this.address}::aptos_governance::GovernanceResponsbility(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isVotingRecords = (resource: Types.MoveResource): resource is TypedMoveResource<VotingRecords> => {
    const regexp = new RegExp(\`\${this.address}::aptos_governance::VotingRecords(?:<|$)\`)
    return regexp.test(resource.type)
  }

  extractApprovedExecutionHashesTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::aptos_governance::ApprovedExecutionHashes<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractGovernanceConfigTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::aptos_governance::GovernanceConfig<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractGovernanceEventsTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::aptos_governance::GovernanceEvents<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractGovernanceResponsbilityTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::aptos_governance::GovernanceResponsbility<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractVotingRecordsTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::aptos_governance::VotingRecords<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

}
",
      "path": "./AptosGovernanceUtils.ts",
    },
  },
  {
    "factory": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { AptosModuleClient, MoveModuleJSON, SignerOrClient } from '@horizonx/aptos-module-client'
import { CoinModule } from './Coin'
  
const _abi: MoveModuleJSON = {
  "address": "0x1",
  "name": "coin",
  "friends": [
    "0x1::aptos_coin",
    "0x1::genesis"
  ],
  "exposed_functions": [
    {
      "name": "allow_supply_upgrades",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [],
      "params": [
        "&signer",
        "bool"
      ],
      "return": []
    },
    {
      "name": "balance",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "address"
      ],
      "return": [
        "u64"
      ]
    },
    {
      "name": "burn",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "0x1::coin::Coin<T0>",
        "&0x1::coin::BurnCapability<T0>"
      ],
      "return": []
    },
    {
      "name": "burn_from",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "address",
        "u64",
        "&0x1::coin::BurnCapability<T0>"
      ],
      "return": []
    },
    {
      "name": "decimals",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "u8"
      ]
    },
    {
      "name": "deposit",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "address",
        "0x1::coin::Coin<T0>"
      ],
      "return": []
    },
    {
      "name": "destroy_burn_cap",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "0x1::coin::BurnCapability<T0>"
      ],
      "return": []
    },
    {
      "name": "destroy_freeze_cap",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "0x1::coin::FreezeCapability<T0>"
      ],
      "return": []
    },
    {
      "name": "destroy_mint_cap",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "0x1::coin::MintCapability<T0>"
      ],
      "return": []
    },
    {
      "name": "destroy_zero",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "0x1::coin::Coin<T0>"
      ],
      "return": []
    },
    {
      "name": "extract",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&mut 0x1::coin::Coin<T0>",
        "u64"
      ],
      "return": [
        "0x1::coin::Coin<T0>"
      ]
    },
    {
      "name": "extract_all",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&mut 0x1::coin::Coin<T0>"
      ],
      "return": [
        "0x1::coin::Coin<T0>"
      ]
    },
    {
      "name": "freeze_coin_store",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "address",
        "&0x1::coin::FreezeCapability<T0>"
      ],
      "return": []
    },
    {
      "name": "initialize",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "0x1::string::String",
        "0x1::string::String",
        "u8",
        "bool"
      ],
      "return": [
        "0x1::coin::BurnCapability<T0>",
        "0x1::coin::FreezeCapability<T0>",
        "0x1::coin::MintCapability<T0>"
      ]
    },
    {
      "name": "initialize_supply_config",
      "visibility": "friend",
      "is_entry": false,
      "generic_type_params": [],
      "params": [
        "&signer"
      ],
      "return": []
    },
    {
      "name": "initialize_with_parallelizable_supply",
      "visibility": "friend",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "0x1::string::String",
        "0x1::string::String",
        "u8",
        "bool"
      ],
      "return": [
        "0x1::coin::BurnCapability<T0>",
        "0x1::coin::FreezeCapability<T0>",
        "0x1::coin::MintCapability<T0>"
      ]
    },
    {
      "name": "is_account_registered",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "address"
      ],
      "return": [
        "bool"
      ]
    },
    {
      "name": "is_coin_initialized",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "bool"
      ]
    },
    {
      "name": "merge",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&mut 0x1::coin::Coin<T0>",
        "0x1::coin::Coin<T0>"
      ],
      "return": []
    },
    {
      "name": "mint",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "u64",
        "&0x1::coin::MintCapability<T0>"
      ],
      "return": [
        "0x1::coin::Coin<T0>"
      ]
    },
    {
      "name": "name",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "0x1::string::String"
      ]
    },
    {
      "name": "register",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer"
      ],
      "return": []
    },
    {
      "name": "supply",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "0x1::option::Option<u128>"
      ]
    },
    {
      "name": "symbol",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "0x1::string::String"
      ]
    },
    {
      "name": "transfer",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "address",
        "u64"
      ],
      "return": []
    },
    {
      "name": "upgrade_supply",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer"
      ],
      "return": []
    },
    {
      "name": "value",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&0x1::coin::Coin<T0>"
      ],
      "return": [
        "u64"
      ]
    },
    {
      "name": "withdraw",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "u64"
      ],
      "return": [
        "0x1::coin::Coin<T0>"
      ]
    },
    {
      "name": "zero",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "0x1::coin::Coin<T0>"
      ]
    }
  ],
  "structs": [
    {
      "name": "BurnCapability",
      "is_native": false,
      "abilities": [
        "copy",
        "store"
      ],
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "fields": [
        {
          "name": "dummy_field",
          "type": "bool"
        }
      ]
    },
    {
      "name": "Coin",
      "is_native": false,
      "abilities": [
        "store"
      ],
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "fields": [
        {
          "name": "value",
          "type": "u64"
        }
      ]
    },
    {
      "name": "CoinInfo",
      "is_native": false,
      "abilities": [
        "key"
      ],
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "fields": [
        {
          "name": "name",
          "type": "0x1::string::String"
        },
        {
          "name": "symbol",
          "type": "0x1::string::String"
        },
        {
          "name": "decimals",
          "type": "u8"
        },
        {
          "name": "supply",
          "type": "0x1::option::Option<0x1::optional_aggregator::OptionalAggregator>"
        }
      ]
    },
    {
      "name": "CoinStore",
      "is_native": false,
      "abilities": [
        "key"
      ],
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "fields": [
        {
          "name": "coin",
          "type": "0x1::coin::Coin<T0>"
        },
        {
          "name": "frozen",
          "type": "bool"
        },
        {
          "name": "deposit_events",
          "type": "0x1::event::EventHandle<0x1::coin::DepositEvent>"
        },
        {
          "name": "withdraw_events",
          "type": "0x1::event::EventHandle<0x1::coin::WithdrawEvent>"
        }
      ]
    },
    {
      "name": "DepositEvent",
      "is_native": false,
      "abilities": [
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "FreezeCapability",
      "is_native": false,
      "abilities": [
        "copy",
        "store"
      ],
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "fields": [
        {
          "name": "dummy_field",
          "type": "bool"
        }
      ]
    },
    {
      "name": "MintCapability",
      "is_native": false,
      "abilities": [
        "copy",
        "store"
      ],
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "fields": [
        {
          "name": "dummy_field",
          "type": "bool"
        }
      ]
    },
    {
      "name": "SupplyConfig",
      "is_native": false,
      "abilities": [
        "key"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "allow_upgrades",
          "type": "bool"
        }
      ]
    },
    {
      "name": "WithdrawEvent",
      "is_native": false,
      "abilities": [
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    }
  ]
}
  
export class CoinModuleFactory {
  static readonly abi = _abi
  static connect = (signerOrClient: SignerOrClient, address?: string) => {
    return new AptosModuleClient(_abi, signerOrClient, address) as CoinModule
  }
}
",
      "path": "./CoinModuleFactory.ts",
    },
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString, Types } from 'aptos'
import { Option } from './Option'
import { OptionalAggregator } from './OptionalAggregator'
import { EventHandle } from './Event'
import { AptosModuleClient, EventGetterParams, TypedEvent, TypedMoveResource } from '@horizonx/aptos-module-client'

export interface CoinModule extends AptosModuleClient  {
  freeze_coin_store: (payload: { type_arguments: [string], arguments: [MaybeHexString, any] }) => Promise<void>
  transfer: (payload: { type_arguments: [string], arguments: [MaybeHexString, BCS.Uint64] }) => Promise<void>
  upgrade_supply: (payload: { type_arguments: [string] }) => Promise<void>
  getCoinInfo: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<CoinInfo>>
  getCoinStore: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<CoinStore>>
  getSupplyConfig: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<SupplyConfig>>
  getDepositEvents: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<DepositEvent>>
  getWithdrawEvents: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<WithdrawEvent>>
}

export type BurnCapability = {
  dummy_field: boolean
}

export type Coin = {
  value: BCS.Uint64
}

export type CoinInfo = {
  name: string
  symbol: string
  decimals: BCS.Uint8
  supply: Option<OptionalAggregator>
}

export type CoinStore = {
  coin: Coin
  frozen: boolean
  deposit_events: EventHandle
  withdraw_events: EventHandle
}

export type DepositEvent = {
  amount: BCS.Uint64
}

export type FreezeCapability = {
  dummy_field: boolean
}

export type MintCapability = {
  dummy_field: boolean
}

export type SupplyConfig = {
  allow_upgrades: boolean
}

export type WithdrawEvent = {
  amount: BCS.Uint64
}
",
      "path": "./Coin.ts",
    },
    "utilities": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { TypedMoveResource } from '@horizonx/aptos-module-client'
import { Types } from 'aptos'
import { CoinInfo, CoinStore, SupplyConfig } from './Coin'

export class CoinUtils {
  private address: string

  constructor(address?: string){
    this.address = address || '0x1'
  }

  isCoinInfo = (resource: Types.MoveResource): resource is TypedMoveResource<CoinInfo> => {
    const regexp = new RegExp(\`\${this.address}::coin::CoinInfo(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isCoinStore = (resource: Types.MoveResource): resource is TypedMoveResource<CoinStore> => {
    const regexp = new RegExp(\`\${this.address}::coin::CoinStore(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isSupplyConfig = (resource: Types.MoveResource): resource is TypedMoveResource<SupplyConfig> => {
    const regexp = new RegExp(\`\${this.address}::coin::SupplyConfig(?:<|$)\`)
    return regexp.test(resource.type)
  }

  extractCoinInfoTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::coin::CoinInfo<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractCoinStoreTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::coin::CoinStore<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractSupplyConfigTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::coin::SupplyConfig<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

}
",
      "path": "./CoinUtils.ts",
    },
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS } from 'aptos'
import { GUID } from './Guid'

export type EventHandle = {
  counter: BCS.Uint64
  guid: GUID
}
",
      "path": "./Event.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString } from 'aptos'

export type GUID = {
  id: ID
}

export type ID = {
  creation_num: BCS.Uint64
  addr: MaybeHexString
}
",
      "path": "./Guid.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { TableWithLength } from './TableWithLength'
import { Option } from './Option'

export type IterableTable<T0> = {
  inner: TableWithLength
  head: Option<T0>
  tail: Option<T0>
}

export type IterableValue<T0, T1> = {
  val: T1
  prev: Option<T0>
  next: Option<T0>
}
",
      "path": "./IterableTable.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
export type Option<T0> = {
  vec: Array<T0>
}
",
      "path": "./Option.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS } from 'aptos'
import { Option } from './Option'
import { Aggregator } from './Aggregator'

export type Integer = {
  value: BCS.Uint128
  limit: BCS.Uint128
}

export type OptionalAggregator = {
  aggregator: Option<Aggregator>
  integer: Option<Integer>
}
",
      "path": "./OptionalAggregator.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { AptosModuleClient, MoveModuleJSON, SignerOrClient } from '@horizonx/aptos-module-client'
import { PoolModule } from './Pool'
  
const _abi: MoveModuleJSON = {
  "address": "0x3b6e641ab8f8efad88169e44597b9c6822a158a5292a7aa7c0b41cf821603bd9",
  "name": "pool",
  "friends": [
    "0x3b6e641ab8f8efad88169e44597b9c6822a158a5292a7aa7c0b41cf821603bd9::system_administrator"
  ],
  "exposed_functions": [
    {
      "name": "borrow",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "u64",
        "bool"
      ],
      "return": []
    },
    {
      "name": "borrow_for",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "address",
        "address",
        "u64",
        "bool"
      ],
      "return": []
    },
    {
      "name": "calc_debt_amount_and_share",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        },
        {
          "constraints": []
        }
      ],
      "params": [
        "address",
        "u128",
        "u64"
      ],
      "return": [
        "u64",
        "u64"
      ]
    },
    {
      "name": "collateral_value",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        },
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer"
      ],
      "return": [
        "u64"
      ]
    },
    {
      "name": "debt_value",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        },
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer"
      ],
      "return": [
        "u64"
      ]
    },
    {
      "name": "deposit",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "u64",
        "bool",
        "bool"
      ],
      "return": []
    },
    {
      "name": "deposit_for",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "address",
        "u64",
        "bool",
        "bool"
      ],
      "return": []
    },
    {
      "name": "init_pool",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer"
      ],
      "return": []
    },
    {
      "name": "is_asset_solvent",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "address"
      ],
      "return": [
        "bool"
      ]
    },
    {
      "name": "is_available",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "bool"
      ]
    },
    {
      "name": "is_pool_initialized",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "bool"
      ]
    },
    {
      "name": "is_shadow_solvent",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "address"
      ],
      "return": [
        "bool"
      ]
    },
    {
      "name": "last_updated",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        },
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "u64"
      ]
    },
    {
      "name": "liquidate",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "address",
        "bool"
      ],
      "return": []
    },
    {
      "name": "liquidity",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        },
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "u128"
      ]
    },
    {
      "name": "repay",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "u64",
        "bool"
      ],
      "return": []
    },
    {
      "name": "total_borrows",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        },
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "u128"
      ]
    },
    {
      "name": "total_conly_deposits",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        },
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "u128"
      ]
    },
    {
      "name": "total_deposits",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        },
        {
          "constraints": []
        }
      ],
      "params": [],
      "return": [
        "u128"
      ]
    },
    {
      "name": "update_status",
      "visibility": "friend",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "bool"
      ],
      "return": []
    },
    {
      "name": "user_ltv",
      "visibility": "public",
      "is_entry": false,
      "generic_type_params": [
        {
          "constraints": []
        },
        {
          "constraints": []
        },
        {
          "constraints": []
        }
      ],
      "params": [
        "address"
      ],
      "return": [
        "u64"
      ]
    },
    {
      "name": "withdraw",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "u64",
        "bool",
        "bool"
      ],
      "return": []
    },
    {
      "name": "withdraw_for",
      "visibility": "public",
      "is_entry": true,
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "params": [
        "&signer",
        "address",
        "u64",
        "bool",
        "bool"
      ],
      "return": []
    }
  ],
  "structs": [
    {
      "name": "BorrowEvent",
      "is_native": false,
      "abilities": [
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "caller",
          "type": "address"
        },
        {
          "name": "borrower",
          "type": "address"
        },
        {
          "name": "receiver",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "is_shadow",
          "type": "bool"
        }
      ]
    },
    {
      "name": "DepositEvent",
      "is_native": false,
      "abilities": [
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "caller",
          "type": "address"
        },
        {
          "name": "depositor",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "is_collateral_only",
          "type": "bool"
        },
        {
          "name": "is_shadow",
          "type": "bool"
        }
      ]
    },
    {
      "name": "LiquidateEvent",
      "is_native": false,
      "abilities": [
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "caller",
          "type": "address"
        },
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "is_shadow",
          "type": "bool"
        }
      ]
    },
    {
      "name": "Pool",
      "is_native": false,
      "abilities": [
        "key"
      ],
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "fields": [
        {
          "name": "asset",
          "type": "0x1::coin::Coin<T0>"
        },
        {
          "name": "shadow",
          "type": "0x1::coin::Coin<0x1::aptos_coin::AptosCoin>"
        },
        {
          "name": "is_active",
          "type": "bool"
        }
      ]
    },
    {
      "name": "PoolEventHandle",
      "is_native": false,
      "abilities": [
        "store",
        "key"
      ],
      "generic_type_params": [
        {
          "constraints": []
        }
      ],
      "fields": [
        {
          "name": "deposit_event",
          "type": "0x1::event::EventHandle<0x3b6e641ab8f8efad88169e44597b9c6822a158a5292a7aa7c0b41cf821603bd9::pool::DepositEvent>"
        },
        {
          "name": "withdraw_event",
          "type": "0x1::event::EventHandle<0x3b6e641ab8f8efad88169e44597b9c6822a158a5292a7aa7c0b41cf821603bd9::pool::WithdrawEvent>"
        },
        {
          "name": "borrow_event",
          "type": "0x1::event::EventHandle<0x3b6e641ab8f8efad88169e44597b9c6822a158a5292a7aa7c0b41cf821603bd9::pool::BorrowEvent>"
        },
        {
          "name": "repay_event",
          "type": "0x1::event::EventHandle<0x3b6e641ab8f8efad88169e44597b9c6822a158a5292a7aa7c0b41cf821603bd9::pool::RepayEvent>"
        },
        {
          "name": "liquidate_event",
          "type": "0x1::event::EventHandle<0x3b6e641ab8f8efad88169e44597b9c6822a158a5292a7aa7c0b41cf821603bd9::pool::LiquidateEvent>"
        }
      ]
    },
    {
      "name": "RepayEvent",
      "is_native": false,
      "abilities": [
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "caller",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "is_shadow",
          "type": "bool"
        }
      ]
    },
    {
      "name": "Storage",
      "is_native": false,
      "abilities": [
        "key"
      ],
      "generic_type_params": [
        {
          "constraints": []
        },
        {
          "constraints": []
        }
      ],
      "fields": [
        {
          "name": "total_deposits",
          "type": "u128"
        },
        {
          "name": "total_conly_deposits",
          "type": "u128"
        },
        {
          "name": "total_borrows",
          "type": "u128"
        },
        {
          "name": "last_updated",
          "type": "u64"
        }
      ]
    },
    {
      "name": "WithdrawEvent",
      "is_native": false,
      "abilities": [
        "drop",
        "store"
      ],
      "generic_type_params": [],
      "fields": [
        {
          "name": "caller",
          "type": "address"
        },
        {
          "name": "depositor",
          "type": "address"
        },
        {
          "name": "receiver",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "is_collateral_only",
          "type": "bool"
        },
        {
          "name": "is_shadow",
          "type": "bool"
        }
      ]
    }
  ]
}
  
export class PoolModuleFactory {
  static readonly abi = _abi
  static connect = (signerOrClient: SignerOrClient, address?: string) => {
    return new AptosModuleClient(_abi, signerOrClient, address) as PoolModule
  }
}
",
      "path": "./PoolModuleFactory.ts",
    },
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString, Types } from 'aptos'
import { Coin } from './Coin'
import { AptosCoin } from './AptosCoin'
import { EventHandle } from './Event'
import { AptosModuleClient, EventGetterParams, TypedEvent, TypedMoveResource } from '@horizonx/aptos-module-client'

export interface PoolModule extends AptosModuleClient  {
  borrow: (payload: { type_arguments: [string], arguments: [BCS.Uint64, boolean] }) => Promise<void>
  borrow_for: (payload: { type_arguments: [string], arguments: [MaybeHexString, MaybeHexString, BCS.Uint64, boolean] }) => Promise<void>
  collateral_value: (payload: { type_arguments: [string, string] }) => Promise<void>
  debt_value: (payload: { type_arguments: [string, string] }) => Promise<void>
  deposit: (payload: { type_arguments: [string], arguments: [BCS.Uint64, boolean, boolean] }) => Promise<void>
  deposit_for: (payload: { type_arguments: [string], arguments: [MaybeHexString, BCS.Uint64, boolean, boolean] }) => Promise<void>
  init_pool: (payload: { type_arguments: [string] }) => Promise<void>
  is_asset_solvent: (payload: { type_arguments: [string], arguments: [MaybeHexString] }) => Promise<void>
  is_shadow_solvent: (payload: { type_arguments: [string], arguments: [MaybeHexString] }) => Promise<void>
  last_updated: (payload: { type_arguments: [string, string] }) => Promise<void>
  liquidate: (payload: { type_arguments: [string], arguments: [MaybeHexString, boolean] }) => Promise<void>
  liquidity: (payload: { type_arguments: [string, string] }) => Promise<void>
  repay: (payload: { type_arguments: [string], arguments: [BCS.Uint64, boolean] }) => Promise<void>
  total_borrows: (payload: { type_arguments: [string, string] }) => Promise<void>
  total_conly_deposits: (payload: { type_arguments: [string, string] }) => Promise<void>
  total_deposits: (payload: { type_arguments: [string, string] }) => Promise<void>
  update_status: (payload: { type_arguments: [string], arguments: [boolean] }) => Promise<void>
  withdraw: (payload: { type_arguments: [string], arguments: [BCS.Uint64, boolean, boolean] }) => Promise<void>
  withdraw_for: (payload: { type_arguments: [string], arguments: [MaybeHexString, BCS.Uint64, boolean, boolean] }) => Promise<void>
  getPool: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<Pool>>
  getPoolEventHandle: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<PoolEventHandle>>
  getStorage: (owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<Storage>>
  getDepositEvent: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<DepositEvent>>
  getWithdrawEvent: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<WithdrawEvent>>
  getBorrowEvent: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<BorrowEvent>>
  getRepayEvent: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<RepayEvent>>
  getLiquidateEvent: (address: MaybeHexString, typeParameter?: string) => Promise<TypedEvent<LiquidateEvent>>
}

export type BorrowEvent = {
  caller: MaybeHexString
  borrower: MaybeHexString
  receiver: MaybeHexString
  amount: BCS.Uint64
  is_shadow: boolean
}

export type DepositEvent = {
  caller: MaybeHexString
  depositor: MaybeHexString
  amount: BCS.Uint64
  is_collateral_only: boolean
  is_shadow: boolean
}

export type LiquidateEvent = {
  caller: MaybeHexString
  target: MaybeHexString
  is_shadow: boolean
}

export type Pool = {
  asset: Coin
  shadow: Coin
  is_active: boolean
}

export type PoolEventHandle = {
  deposit_event: EventHandle
  withdraw_event: EventHandle
  borrow_event: EventHandle
  repay_event: EventHandle
  liquidate_event: EventHandle
}

export type RepayEvent = {
  caller: MaybeHexString
  amount: BCS.Uint64
  is_shadow: boolean
}

export type Storage = {
  total_deposits: BCS.Uint128
  total_conly_deposits: BCS.Uint128
  total_borrows: BCS.Uint128
  last_updated: BCS.Uint64
}

export type WithdrawEvent = {
  caller: MaybeHexString
  depositor: MaybeHexString
  receiver: MaybeHexString
  amount: BCS.Uint64
  is_collateral_only: boolean
  is_shadow: boolean
}
",
      "path": "./Pool.ts",
    },
    "utilities": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { TypedMoveResource } from '@horizonx/aptos-module-client'
import { Types } from 'aptos'
import { Pool, PoolEventHandle, Storage } from './Pool'

export class PoolUtils {
  private address: string

  constructor(address?: string){
    this.address = address || '0x3b6e641ab8f8efad88169e44597b9c6822a158a5292a7aa7c0b41cf821603bd9'
  }

  isPool = (resource: Types.MoveResource): resource is TypedMoveResource<Pool> => {
    const regexp = new RegExp(\`\${this.address}::pool::Pool(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isPoolEventHandle = (resource: Types.MoveResource): resource is TypedMoveResource<PoolEventHandle> => {
    const regexp = new RegExp(\`\${this.address}::pool::PoolEventHandle(?:<|$)\`)
    return regexp.test(resource.type)
  }

  isStorage = (resource: Types.MoveResource): resource is TypedMoveResource<Storage> => {
    const regexp = new RegExp(\`\${this.address}::pool::Storage(?:<|$)\`)
    return regexp.test(resource.type)
  }

  extractPoolTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::pool::Pool<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractPoolEventHandleTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::pool::PoolEventHandle<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

  extractStorageTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::pool::Storage<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

}
",
      "path": "./PoolUtils.ts",
    },
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
export type Element<T0, T1> = {
  key: T0
  value: T1
}

export type SimpleMap<T0, T1> = {
  data: Array<Element<T0, T1>>
}
",
      "path": "./SimpleMap.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { MaybeHexString, Types } from 'aptos'
import { AptosModuleClient, TypedMoveResource } from '@horizonx/aptos-module-client'

export interface TableModule extends AptosModuleClient  {
  getBox: <T0>(owner: MaybeHexString, typeParameter?: string) => Promise<TypedMoveResource<Box<T0>>>
}

export type Box<T0> = {
  val: T0
}

export type Table = {
  handle: MaybeHexString
}
",
      "path": "./Table.ts",
    },
    "utilities": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { TypedMoveResource } from '@horizonx/aptos-module-client'
import { Types } from 'aptos'
import { Box } from './Table'

export class TableUtils {
  private address: string

  constructor(address?: string){
    this.address = address || '0x1'
  }

  isBox = <T0>(resource: Types.MoveResource): resource is TypedMoveResource<Box<T0>> => {
    const regexp = new RegExp(\`\${this.address}::table::Box(?:<|$)\`)
    return regexp.test(resource.type)
  }

  extractBoxTypeParameters = (type: string) => {
    const result = new RegExp(\`^\${this.address}::table::Box<(.*)>$\`).exec(type)
    return result && result[1]?.split(', ')
  }

}
",
      "path": "./TableUtils.ts",
    },
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Table } from './Table'
import { BCS } from 'aptos'

export type TableWithLength = {
  inner: Table
  length: BCS.Uint64
}
",
      "path": "./TableWithLength.ts",
    },
    "utilities": undefined,
  },
  {
    "factory": undefined,
    "types": {
      "content": "/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BCS, MaybeHexString } from 'aptos'

export type TypeInfo = {
  account_address: MaybeHexString
  module_name: Array<BCS.Uint8>
  struct_name: Array<BCS.Uint8>
}
",
      "path": "./TypeInfo.ts",
    },
    "utilities": undefined,
  },
]
`;
